#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 5.0.2
#  in conjunction with Tcl version 8.6
#    Aug 13, 2020 03:23:02 PM BST  platform: Windows NT

import sys

try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

import simulator_support

def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = tk.Tk()
    simulator_support.set_Tk_var()
    top = Toplevel1 (root)
    simulator_support.init(root, top)
    root.mainloop()

w = None
def create_Toplevel1(rt, *args, **kwargs):
    '''Starting point when module is imported by another module.
       Correct form of call: 'create_Toplevel1(root, *args, **kwargs)' .'''
    global w, w_win, root
    #rt = root
    root = rt
    w = tk.Toplevel (root)
    simulator_support.set_Tk_var()
    top = Toplevel1 (w)
    simulator_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_Toplevel1():
    global w
    w.destroy()
    w = None

class Toplevel1:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85'
        _ana2color = '#ececec' # Closest X11 color: 'gray92'
        font11 = "TkDefaultFont"
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.',background=_bgcolor)
        self.style.configure('.',foreground=_fgcolor)
        self.style.map('.',background=
            [('selected', _compcolor), ('active',_ana2color)])

        top.geometry("1420x880+127+105")
        top.minsize(124, 1)
        top.maxsize(1905, 1905)
        top.resizable(1, 1)
        top.title("ARGUMENT GAME SIMULATOR")
        top.configure(background="#d9d9d9")
        top.configure(highlightbackground="wheat")
        top.configure(highlightcolor="black")

        self.Labelframe1 = tk.LabelFrame(top)
        self.Labelframe1.place(relx=0.075, rely=0.535, relheight=0.177
                , relwidth=0.353)
        self.Labelframe1.configure(relief='groove')
        self.Labelframe1.configure(font="-family {微软雅黑 Light} -size 9")
        self.Labelframe1.configure(foreground="black")
        self.Labelframe1.configure(text='''AUTO MODE''')
        self.Labelframe1.configure(background="#d9d9d9")
        self.Labelframe1.configure(highlightbackground="#f5deb3")
        self.Labelframe1.configure(highlightcolor="black")

        self.Label1 = tk.Label(self.Labelframe1)
        self.Label1.place(relx=0.016, rely=0.269, height=33, width=261
                , bordermode='ignore')
        self.Label1.configure(activebackground="#fae6ff")
        self.Label1.configure(activeforeground="black")
        self.Label1.configure(background="#d9d9d9")
        self.Label1.configure(disabledforeground="#a496b0")
        self.Label1.configure(font="-family {微软雅黑 Light} -size 12")
        self.Label1.configure(foreground="#000000")
        self.Label1.configure(highlightbackground="#dac8ea")
        self.Label1.configure(highlightcolor="black")
        self.Label1.configure(text='''Nodes Numbers:''')

        self.Spinbox_autoNodesNum = tk.Spinbox(self.Labelframe1, from_=2.0, to=7.0)
        self.Spinbox_autoNodesNum.place(relx=0.499, rely=0.276, relheight=0.186
                , relwidth=0.391, bordermode='ignore')
        self.Spinbox_autoNodesNum.configure(activebackground="#f9f9f9")
        self.Spinbox_autoNodesNum.configure(background="white")
        self.Spinbox_autoNodesNum.configure(buttonbackground="wheat")
        self.Spinbox_autoNodesNum.configure(disabledforeground="#b8a786")
        self.Spinbox_autoNodesNum.configure(exportselection="0")
        self.Spinbox_autoNodesNum.configure(font="-family {微软雅黑 Light} -size 14")
        self.Spinbox_autoNodesNum.configure(foreground="black")
        self.Spinbox_autoNodesNum.configure(highlightbackground="black")
        self.Spinbox_autoNodesNum.configure(highlightcolor="black")
        self.Spinbox_autoNodesNum.configure(insertbackground="black")
        self.Spinbox_autoNodesNum.configure(justify='center')
        self.Spinbox_autoNodesNum.configure(selectbackground="#c4c4c4")
        self.Spinbox_autoNodesNum.configure(selectforeground="black")
        self.Spinbox_autoNodesNum.configure(textvariable=simulator_support.spinbox)

        self.button_autoGenerate = tk.Button(self.Labelframe1)
        self.button_autoGenerate.place(relx=0.06, rely=0.577, height=41
                , width=424, bordermode='ignore')
        self.button_autoGenerate.configure(activebackground="#f4bcb2")
        self.button_autoGenerate.configure(activeforeground="black")
        self.button_autoGenerate.configure(background="#d9d9d9")
        self.button_autoGenerate.configure(disabledforeground="#b8a786")
        self.button_autoGenerate.configure(font="-family {Microsoft YaHei UI} -size 12")
        self.button_autoGenerate.configure(foreground="#000000")
        self.button_autoGenerate.configure(highlightbackground="wheat")
        self.button_autoGenerate.configure(highlightcolor="black")
        self.button_autoGenerate.configure(pady="0")
        self.button_autoGenerate.configure(text='''AUTO GENERATE''')
        self.button_autoGenerate.bind('<Button-1>',lambda e:simulator_support.autoGenerate(e))

        self.Frame2 = tk.Frame(top)
        self.Frame2.place(relx=0.076, rely=0.026, relheight=0.097
                , relwidth=0.861)
        self.Frame2.configure(relief='groove')
        self.Frame2.configure(borderwidth="2")
        self.Frame2.configure(relief="groove")
        self.Frame2.configure(background="#d9d9d9")
        self.Frame2.configure(highlightbackground="#dac8ea")
        self.Frame2.configure(highlightcolor="black")

        self.Label2 = tk.Label(self.Frame2)
        self.Label2.place(relx=0.196, rely=0.212, height=40, width=647)
        self.Label2.configure(activebackground="#fae6ff")
        self.Label2.configure(activeforeground="black")
        self.Label2.configure(background="#d9d9d9")
        self.Label2.configure(disabledforeground="#a496b0")
        self.Label2.configure(font="-family {微软雅黑 Light} -size 14")
        self.Label2.configure(foreground="#000000")
        self.Label2.configure(highlightbackground="#dac8ea")
        self.Label2.configure(highlightcolor="black")
        self.Label2.configure(text='''ARGUMENT GAME SIMULATOR''')

        self.menubar = tk.Menu(top,font="TkMenuFont",bg='#ffffff',fg='#ffffff')
        top.configure(menu = self.menubar)

        self.Labelframe1_6 = tk.LabelFrame(top)
        self.Labelframe1_6.place(relx=0.075, rely=0.744, relheight=0.198
                , relwidth=0.353)
        self.Labelframe1_6.configure(relief='groove')
        self.Labelframe1_6.configure(font="-family {Microsoft YaHei UI Light} -size 9")
        self.Labelframe1_6.configure(foreground="black")
        self.Labelframe1_6.configure(text='''CUSTOMIZED MODE''')
        self.Labelframe1_6.configure(background="#d9d9d9")
        self.Labelframe1_6.configure(highlightbackground="#f5deb3")
        self.Labelframe1_6.configure(highlightcolor="black")

        self.button_addNode = tk.Button(self.Labelframe1_6)
        self.button_addNode.place(relx=0.559, rely=0.264, height=46, width=196
                , bordermode='ignore')
        self.button_addNode.configure(activebackground="#f4bcb2")
        self.button_addNode.configure(activeforeground="black")
        self.button_addNode.configure(background="#d9d9d9")
        self.button_addNode.configure(disabledforeground="#b8a786")
        self.button_addNode.configure(font="-family {Microsoft YaHei UI} -size 12")
        self.button_addNode.configure(foreground="#000000")
        self.button_addNode.configure(highlightbackground="wheat")
        self.button_addNode.configure(highlightcolor="black")
        self.button_addNode.configure(pady="0")
        self.button_addNode.configure(text='''ADD NODE''')
        self.button_addNode.bind('<Button-1>',lambda e:simulator_support.addNodes(e))

        self.entry_addNode = tk.Entry(self.Labelframe1_6)
        self.entry_addNode.place(relx=0.04, rely=0.264, height=52, relwidth=0.485
                , bordermode='ignore')
        self.entry_addNode.configure(background="white")
        self.entry_addNode.configure(disabledforeground="#b8a786")
        self.entry_addNode.configure(font="-family {Microsoft YaHei UI Light} -size 12")
        self.entry_addNode.configure(foreground="#000000")
        self.entry_addNode.configure(highlightbackground="wheat")
        self.entry_addNode.configure(highlightcolor="black")
        self.entry_addNode.configure(insertbackground="black")
        self.entry_addNode.configure(selectbackground="#ddc8a1")
        self.entry_addNode.configure(selectforeground="black")

        self.button_addAttack = tk.Button(self.Labelframe1_6)
        self.button_addAttack.place(relx=0.559, rely=0.58, height=46, width=196
                , bordermode='ignore')
        self.button_addAttack.configure(activebackground="#f4bcb2")
        self.button_addAttack.configure(activeforeground="black")
        self.button_addAttack.configure(background="#d9d9d9")
        self.button_addAttack.configure(disabledforeground="#b8a786")
        self.button_addAttack.configure(font="-family {Microsoft YaHei UI} -size 12")
        self.button_addAttack.configure(foreground="#000000")
        self.button_addAttack.configure(highlightbackground="wheat")
        self.button_addAttack.configure(highlightcolor="black")
        self.button_addAttack.configure(pady="0")
        self.button_addAttack.configure(text='''ADD ATTACK''')
        self.button_addAttack.bind('<Button-1>',lambda e:simulator_support.addEdges(e))

        self.entry_defender = tk.Entry(self.Labelframe1_6)
        self.entry_defender.place(relx=0.319, rely=0.563, height=48
                , relwidth=0.202, bordermode='ignore')
        self.entry_defender.configure(background="white")
        self.entry_defender.configure(disabledforeground="#b8a786")
        self.entry_defender.configure(font="-family {Microsoft YaHei UI Light} -size 12")
        self.entry_defender.configure(foreground="#000000")
        self.entry_defender.configure(highlightbackground="wheat")
        self.entry_defender.configure(highlightcolor="black")
        self.entry_defender.configure(insertbackground="black")
        self.entry_defender.configure(selectbackground="#ddc8a1")
        self.entry_defender.configure(selectforeground="black")

        self.Label3 = tk.Label(self.Labelframe1_6)
        self.Label3.place(relx=0.246, rely=0.58, height=51, width=31
                , bordermode='ignore')
        self.Label3.configure(activebackground="#fae6ff")
        self.Label3.configure(activeforeground="black")
        self.Label3.configure(background="#d9d9d9")
        self.Label3.configure(disabledforeground="#a496b0")
        self.Label3.configure(foreground="#000000")
        self.Label3.configure(highlightbackground="#dac8ea")
        self.Label3.configure(highlightcolor="black")
        self.Label3.configure(text='''→''')

        self.entry_attacker = tk.Entry(self.Labelframe1_6)
        self.entry_attacker.place(relx=0.04, rely=0.58, height=48, relwidth=0.202
                , bordermode='ignore')
        self.entry_attacker.configure(background="white")
        self.entry_attacker.configure(disabledforeground="#b8a786")
        self.entry_attacker.configure(font="-family {Microsoft YaHei UI Light} -size 12")
        self.entry_attacker.configure(foreground="#000000")
        self.entry_attacker.configure(highlightbackground="wheat")
        self.entry_attacker.configure(highlightcolor="black")
        self.entry_attacker.configure(insertbackground="black")
        self.entry_attacker.configure(selectbackground="#ddc8a1")
        self.entry_attacker.configure(selectforeground="black")

        self.Labelframe2 = tk.LabelFrame(top)
        self.Labelframe2.place(relx=0.077, rely=0.136, relheight=0.382
                , relwidth=0.354)
        self.Labelframe2.configure(relief='groove')
        self.Labelframe2.configure(font="-family {Microsoft YaHei UI Light} -size 9")
        self.Labelframe2.configure(foreground="black")
        self.Labelframe2.configure(text='''ARGUMENTATION FRAMEWORK''')
        self.Labelframe2.configure(background="#d9d9d9")
        self.Labelframe2.configure(highlightbackground="#dac8ea")
        self.Labelframe2.configure(highlightcolor="black")

        self.Canvas1 = tk.Canvas(self.Labelframe2)
        self.Canvas1.place(relx=0.02, rely=0.086, relheight=0.804, relwidth=0.962
                , bordermode='ignore')
        self.Canvas1.configure(background="white")
        self.Canvas1.configure(borderwidth="2")
        self.Canvas1.configure(highlightbackground="wheat")
        self.Canvas1.configure(highlightcolor="black")
        self.Canvas1.configure(insertbackground="black")
        self.Canvas1.configure(relief="ridge")
        self.Canvas1.configure(selectbackground="#c4c4c4")
        self.Canvas1.configure(selectforeground="black")
        self.Canvas1.bind('<Button-1>',lambda e:simulator_support.showArgumentationFramework(e))

        self.button_clearFramework = tk.Button(self.Labelframe2)
        self.button_clearFramework.place(relx=0.498, rely=0.902, height=26
                , width=230, bordermode='ignore')
        self.button_clearFramework.configure(activebackground="#f4bcb2")
        self.button_clearFramework.configure(activeforeground="#000000")
        self.button_clearFramework.configure(background="#d9d9d9")
        self.button_clearFramework.configure(disabledforeground="#a3a3a3")
        self.button_clearFramework.configure(foreground="#000000")
        self.button_clearFramework.configure(highlightbackground="#d9d9d9")
        self.button_clearFramework.configure(highlightcolor="black")
        self.button_clearFramework.configure(pady="0")
        self.button_clearFramework.configure(text='''REMOVE ALL NODES AND REDESIGN''')
        self.button_clearFramework.bind('<Button-1>',lambda e:simulator_support.cleanCanvas(e))

        self.button_showGraph = tk.Button(self.Labelframe2)
        self.button_showGraph.place(relx=0.04, rely=0.902, height=26, width=190
                , bordermode='ignore')
        self.button_showGraph.configure(activebackground="#f4bcb2")
        self.button_showGraph.configure(activeforeground="#000000")
        self.button_showGraph.configure(background="#d9d9d9")
        self.button_showGraph.configure(disabledforeground="#a3a3a3")
        self.button_showGraph.configure(foreground="#000000")
        self.button_showGraph.configure(highlightbackground="#d9d9d9")
        self.button_showGraph.configure(highlightcolor="black")
        self.button_showGraph.configure(pady="0")
        self.button_showGraph.configure(text='''SHOW FRAMEWORK GRAPH''')
        self.button_showGraph.bind('<Button-1>',lambda e:simulator_support.showCanvas(e))

        self.Labelframe3 = tk.LabelFrame(top)
        self.Labelframe3.place(relx=0.461, rely=0.136, relheight=0.801
                , relwidth=0.475)
        self.Labelframe3.configure(relief='groove')
        self.Labelframe3.configure(font="-family {Microsoft YaHei UI Light} -size 9")
        self.Labelframe3.configure(foreground="black")
        self.Labelframe3.configure(text='''ARGUMENT GAME''')
        self.Labelframe3.configure(background="#d9d9d9")
        self.Labelframe3.configure(highlightbackground="#dac8ea")
        self.Labelframe3.configure(highlightcolor="black")

        self.button_addNode_1 = tk.Button(self.Labelframe3)
        self.button_addNode_1.place(relx=0.074, rely=0.095, height=49, width=166
                , bordermode='ignore')
        self.button_addNode_1.configure(activebackground="#f4bcb2")
        self.button_addNode_1.configure(activeforeground="black")
        self.button_addNode_1.configure(background="#d9d9d9")
        self.button_addNode_1.configure(disabledforeground="#b8a786")
        self.button_addNode_1.configure(font="-family {Microsoft YaHei UI} -size 12")
        self.button_addNode_1.configure(foreground="#000000")
        self.button_addNode_1.configure(highlightbackground="wheat")
        self.button_addNode_1.configure(highlightcolor="black")
        self.button_addNode_1.configure(pady="0")
        self.button_addNode_1.configure(text='''TRY FROM NODE:''')
        self.button_addNode_1.bind('<Button-1>',lambda e:simulator_support.assignRoot(e))

        self.Radiobutton_grounded = tk.Radiobutton(self.Labelframe3)
        self.Radiobutton_grounded.place(relx=0.297, rely=0.041, relheight=0.048
                , relwidth=0.208, bordermode='ignore')
        self.Radiobutton_grounded.configure(activebackground="#f4bcb2")
        self.Radiobutton_grounded.configure(activeforeground="#000000")
        self.Radiobutton_grounded.configure(background="#d9d9d9")
        self.Radiobutton_grounded.configure(disabledforeground="#a496b0")
        self.Radiobutton_grounded.configure(font="-family {Microsoft YaHei UI Light} -size 10")
        self.Radiobutton_grounded.configure(foreground="#000000")
        self.Radiobutton_grounded.configure(highlightbackground="#d9d9d9")
        self.Radiobutton_grounded.configure(highlightcolor="black")
        self.Radiobutton_grounded.configure(justify='left')
        self.Radiobutton_grounded.configure(offrelief="flat")
        self.Radiobutton_grounded.configure(overrelief="sunken")
        self.Radiobutton_grounded.configure(text='''GROUNDED GAME''')
        self.Radiobutton_grounded.configure(value="0")
        self.Radiobutton_grounded.configure(variable=simulator_support.selectedButton)

        self.Radiobutton_preferred = tk.Radiobutton(self.Labelframe3)
        self.Radiobutton_preferred.place(relx=0.549, rely=0.041, relheight=0.048
                , relwidth=0.231, bordermode='ignore')
        self.Radiobutton_preferred.configure(activebackground="#f4bcb2")
        self.Radiobutton_preferred.configure(activeforeground="#000000")
        self.Radiobutton_preferred.configure(background="#d9d9d9")
        self.Radiobutton_preferred.configure(disabledforeground="#a496b0")
        self.Radiobutton_preferred.configure(font="-family {Microsoft YaHei UI Light} -size 10")
        self.Radiobutton_preferred.configure(foreground="#000000")
        self.Radiobutton_preferred.configure(highlightbackground="#d9d9d9")
        self.Radiobutton_preferred.configure(highlightcolor="black")
        self.Radiobutton_preferred.configure(justify='left')
        self.Radiobutton_preferred.configure(offrelief="flat")
        self.Radiobutton_preferred.configure(overrelief="sunken")
        self.Radiobutton_preferred.configure(text='''PREFERRED GAME''')
        self.Radiobutton_preferred.configure(value="1")
        self.Radiobutton_preferred.configure(variable=simulator_support.selectedButton)

        self.Label4 = tk.Label(self.Labelframe3)
        self.Label4.place(relx=0.074, rely=0.041, height=30, width=107
                , bordermode='ignore')
        self.Label4.configure(activebackground="#f9f9f9")
        self.Label4.configure(activeforeground="black")
        self.Label4.configure(background="#d9d9d9")
        self.Label4.configure(disabledforeground="#a496b0")
        self.Label4.configure(foreground="#000000")
        self.Label4.configure(highlightbackground="#d9d9d9")
        self.Label4.configure(highlightcolor="black")
        self.Label4.configure(text='''GAME MODE:''')

        self.entry_assignRoot = tk.Entry(self.Labelframe3)
        self.entry_assignRoot.place(relx=0.341, rely=0.099, height=43
                , relwidth=0.11, bordermode='ignore')
        self.entry_assignRoot.configure(background="white")
        self.entry_assignRoot.configure(disabledforeground="#a496b0")
        self.entry_assignRoot.configure(font="TkFixedFont")
        self.entry_assignRoot.configure(foreground="#000000")
        self.entry_assignRoot.configure(highlightbackground="#d9d9d9")
        self.entry_assignRoot.configure(highlightcolor="black")
        self.entry_assignRoot.configure(insertbackground="black")
        self.entry_assignRoot.configure(selectbackground="#c4c4c4")
        self.entry_assignRoot.configure(selectforeground="black")

        self.button_playOneTIme = tk.Button(self.Labelframe3)
        self.button_playOneTIme.place(relx=0.49, rely=0.095, height=46, width=139
                , bordermode='ignore')
        self.button_playOneTIme.configure(activebackground="#f4bcb2")
        self.button_playOneTIme.configure(activeforeground="#000000")
        self.button_playOneTIme.configure(background="#d9d9d9")
        self.button_playOneTIme.configure(disabledforeground="#a496b0")
        self.button_playOneTIme.configure(font="-family {Microsoft YaHei UI Light} -size 10")
        self.button_playOneTIme.configure(foreground="#000000")
        self.button_playOneTIme.configure(highlightbackground="#d9d9d9")
        self.button_playOneTIme.configure(highlightcolor="black")
        self.button_playOneTIme.configure(pady="0")
        self.button_playOneTIme.configure(text='''PLAY ONE TIME''')
        self.button_playOneTIme.bind('<Button-1>',lambda e:simulator_support.playOneTime(e))

        self.button_playThreeTimes = tk.Button(self.Labelframe3)
        self.button_playThreeTimes.place(relx=0.712, rely=0.095, height=46
                , width=139, bordermode='ignore')
        self.button_playThreeTimes.configure(activebackground="#f4bcb2")
        self.button_playThreeTimes.configure(activeforeground="#000000")
        self.button_playThreeTimes.configure(background="#d9d9d9")
        self.button_playThreeTimes.configure(disabledforeground="#a496b0")
        self.button_playThreeTimes.configure(font="-family {Microsoft YaHei UI Light} -size 10")
        self.button_playThreeTimes.configure(foreground="#000000")
        self.button_playThreeTimes.configure(highlightbackground="#d9d9d9")
        self.button_playThreeTimes.configure(highlightcolor="black")
        self.button_playThreeTimes.configure(pady="0")
        self.button_playThreeTimes.configure(text='''PLAY THREE TIMES''')
        self.button_playThreeTimes.bind('<Button-1>',lambda e:simulator_support.playThreeTimes(e))

        self.button_resume = tk.Button(self.Labelframe3)
        self.button_resume.place(relx=0.846, rely=0.908, height=39, width=91
                , bordermode='ignore')
        self.button_resume.configure(activebackground="#f4bcb2")
        self.button_resume.configure(activeforeground="#000000")
        self.button_resume.configure(background="#d9d9d9")
        self.button_resume.configure(disabledforeground="#a3a3a3")
        self.button_resume.configure(font="-family {Microsoft YaHei UI} -size 10")
        self.button_resume.configure(foreground="#000000")
        self.button_resume.configure(highlightbackground="#d9d9d9")
        self.button_resume.configure(highlightcolor="black")
        self.button_resume.configure(pady="0")
        self.button_resume.configure(text='''RESUME''')
        self.button_resume.bind('<Button-1>',lambda e:simulator_support.resume(e))

        self.Labelframe_groundedGameLogs = tk.LabelFrame(self.Labelframe3)
        self.Labelframe_groundedGameLogs.place(relx=0.401, rely=0.176
                , relheight=0.326, relwidth=0.252, bordermode='ignore')
        self.Labelframe_groundedGameLogs.configure(relief='sunken')
        self.Labelframe_groundedGameLogs.configure(font="-family {Microsoft YaHei UI Light} -size 9")
        self.Labelframe_groundedGameLogs.configure(foreground="black")
        self.Labelframe_groundedGameLogs.configure(relief="sunken")
        self.Labelframe_groundedGameLogs.configure(text='''Grounded Game Path''')
        self.Labelframe_groundedGameLogs.configure(background="#d9d9d9")
        self.Labelframe_groundedGameLogs.configure(highlightbackground="#d9d9d9")
        self.Labelframe_groundedGameLogs.configure(highlightcolor="black")

        self.Labelframe_preferredGameLogs = tk.LabelFrame(self.Labelframe3)
        self.Labelframe_preferredGameLogs.place(relx=0.657, rely=0.176
                , relheight=0.326, relwidth=0.252, bordermode='ignore')
        self.Labelframe_preferredGameLogs.configure(relief='sunken')
        self.Labelframe_preferredGameLogs.configure(font="-family {Microsoft YaHei UI Light} -size 9")
        self.Labelframe_preferredGameLogs.configure(foreground="black")
        self.Labelframe_preferredGameLogs.configure(relief="sunken")
        self.Labelframe_preferredGameLogs.configure(text='''Preferred Game Path''')
        self.Labelframe_preferredGameLogs.configure(background="#d9d9d9")
        self.Labelframe_preferredGameLogs.configure(highlightbackground="#d9d9d9")
        self.Labelframe_preferredGameLogs.configure(highlightcolor="black")

        self.Labelframe_gameLogs = tk.LabelFrame(self.Labelframe3)
        self.Labelframe_gameLogs.place(relx=0.074, rely=0.176, relheight=0.326
                , relwidth=0.319, bordermode='ignore')
        self.Labelframe_gameLogs.configure(relief='sunken')
        self.Labelframe_gameLogs.configure(font="-family {微软雅黑 Light} -size 9")
        self.Labelframe_gameLogs.configure(foreground="black")
        self.Labelframe_gameLogs.configure(relief="sunken")
        self.Labelframe_gameLogs.configure(text='''Game Logs''')
        self.Labelframe_gameLogs.configure(background="#d9d9d9")
        self.Labelframe_gameLogs.configure(highlightbackground="#d9d9d9")
        self.Labelframe_gameLogs.configure(highlightcolor="black")

        self.Scrolledtext_ = ScrolledText(self.Labelframe_gameLogs)
        self.Scrolledtext_.place(relx=0.047, rely=0.087, relheight=0.891
                , relwidth=0.93, bordermode='ignore')
        self.Scrolledtext_.configure(background="#d9d9d9")
        self.Scrolledtext_.configure(borderwidth="0")
        self.Scrolledtext_.configure(font=font11)
        self.Scrolledtext_.configure(foreground="black")
        self.Scrolledtext_.configure(highlightbackground="#d9d9d9")
        self.Scrolledtext_.configure(highlightcolor="black")
        self.Scrolledtext_.configure(insertbackground="black")
        self.Scrolledtext_.configure(insertborderwidth="3")
        self.Scrolledtext_.configure(selectbackground="#c4c4c4")
        self.Scrolledtext_.configure(selectforeground="black")
        self.Scrolledtext_.configure(wrap="none")

        self.Labelframe_winningStrategy = tk.LabelFrame(self.Labelframe3)
        self.Labelframe_winningStrategy.place(relx=0.074, rely=0.528
                , relheight=0.353, relwidth=0.831, bordermode='ignore')
        self.Labelframe_winningStrategy.configure(relief='groove')
        self.Labelframe_winningStrategy.configure(font="-family {Microsoft YaHei UI Light} -size 9")
        self.Labelframe_winningStrategy.configure(foreground="black")
        self.Labelframe_winningStrategy.configure(text='''Winning Strategy''')
        self.Labelframe_winningStrategy.configure(background="#d9d9d9")
        self.Labelframe_winningStrategy.configure(highlightbackground="#d9d9d9")
        self.Labelframe_winningStrategy.configure(highlightcolor="black")

        self.label_congratulations = tk.Label(self.Labelframe_winningStrategy)
        self.label_congratulations.place(relx=0.036, rely=0.321, height=40
                , width=527, bordermode='ignore')
        self.label_congratulations.configure(activebackground="#f9f9f9")
        self.label_congratulations.configure(activeforeground="black")
        self.label_congratulations.configure(background="#d9d9d9")
        self.label_congratulations.configure(disabledforeground="#a496b0")
        self.label_congratulations.configure(foreground="#fc3823")
        self.label_congratulations.configure(highlightbackground="#d9d9d9")
        self.label_congratulations.configure(highlightcolor="black")
        self.label_congratulations.configure(textvariable=simulator_support.message)

        self.button_checkWinningStrategy = tk.Button(self.Labelframe_winningStrategy)
        self.button_checkWinningStrategy.place(relx=0.018, rely=0.116, height=39
                , width=541, bordermode='ignore')
        self.button_checkWinningStrategy.configure(activebackground="#f4bcb2")
        self.button_checkWinningStrategy.configure(activeforeground="#000000")
        self.button_checkWinningStrategy.configure(background="#d9d9d9")
        self.button_checkWinningStrategy.configure(disabledforeground="#a3a3a3")
        self.button_checkWinningStrategy.configure(foreground="#000000")
        self.button_checkWinningStrategy.configure(highlightbackground="#d9d9d9")
        self.button_checkWinningStrategy.configure(highlightcolor="black")
        self.button_checkWinningStrategy.configure(pady="0")
        self.button_checkWinningStrategy.configure(text='''CHECK WINNING STRATEGY''')
        self.button_checkWinningStrategy.bind('<Button-1>',lambda e:simulator_support.checkWinningStrategy(e))

        self.Frame_hiddenWS = tk.Frame(self.Labelframe_winningStrategy)
        self.Frame_hiddenWS.place(relx=0.018, rely=0.482, relheight=0.422
                , relwidth=0.955, bordermode='ignore')
        self.Frame_hiddenWS.configure(relief="groove")
        self.Frame_hiddenWS.configure(background="#d9d9d9")
        self.Frame_hiddenWS.configure(highlightbackground="#d9d9d9")
        self.Frame_hiddenWS.configure(highlightcolor="black")

# The following code is added to facilitate the Scrolled widgets you specified.
class AutoScroll(object):
    '''Configure the scrollbars for a widget.'''
    def __init__(self, master):
        #  Rozen. Added the try-except clauses so that this class
        #  could be used for scrolled entry widget for which vertical
        #  scrolling is not supported. 5/7/14.
        try:
            vsb = ttk.Scrollbar(master, orient='vertical', command=self.yview)
        except:
            pass
        hsb = ttk.Scrollbar(master, orient='horizontal', command=self.xview)
        try:
            self.configure(yscrollcommand=self._autoscroll(vsb))
        except:
            pass
        self.configure(xscrollcommand=self._autoscroll(hsb))
        self.grid(column=0, row=0, sticky='nsew')
        try:
            vsb.grid(column=1, row=0, sticky='ns')
        except:
            pass
        hsb.grid(column=0, row=1, sticky='ew')
        master.grid_columnconfigure(0, weight=1)
        master.grid_rowconfigure(0, weight=1)
        # Copy geometry methods of master  (taken from ScrolledText.py)
        if py3:
            methods = tk.Pack.__dict__.keys() | tk.Grid.__dict__.keys() \
                  | tk.Place.__dict__.keys()
        else:
            methods = tk.Pack.__dict__.keys() + tk.Grid.__dict__.keys() \
                  + tk.Place.__dict__.keys()
        for meth in methods:
            if meth[0] != '_' and meth not in ('config', 'configure'):
                setattr(self, meth, getattr(master, meth))

    @staticmethod
    def _autoscroll(sbar):
        '''Hide and show scrollbar as needed.'''
        def wrapped(first, last):
            first, last = float(first), float(last)
            if first <= 0 and last >= 1:
                sbar.grid_remove()
            else:
                sbar.grid()
            sbar.set(first, last)
        return wrapped

    def __str__(self):
        return str(self.master)

def _create_container(func):
    '''Creates a ttk Frame with a given master, and use this new frame to
    place the scrollbars and the widget.'''
    def wrapped(cls, master, **kw):
        container = ttk.Frame(master)
        container.bind('<Enter>', lambda e: _bound_to_mousewheel(e, container))
        container.bind('<Leave>', lambda e: _unbound_to_mousewheel(e, container))
        return func(cls, container, **kw)
    return wrapped

class ScrolledText(AutoScroll, tk.Text):
    '''A standard Tkinter Text widget with scrollbars that will
    automatically show/hide as needed.'''
    @_create_container
    def __init__(self, master, **kw):
        tk.Text.__init__(self, master, **kw)
        AutoScroll.__init__(self, master)

import platform
def _bound_to_mousewheel(event, widget):
    child = widget.winfo_children()[0]
    if platform.system() == 'Windows' or platform.system() == 'Darwin':
        child.bind_all('<MouseWheel>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Shift-MouseWheel>', lambda e: _on_shiftmouse(e, child))
    else:
        child.bind_all('<Button-4>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Button-5>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Shift-Button-4>', lambda e: _on_shiftmouse(e, child))
        child.bind_all('<Shift-Button-5>', lambda e: _on_shiftmouse(e, child))

def _unbound_to_mousewheel(event, widget):
    if platform.system() == 'Windows' or platform.system() == 'Darwin':
        widget.unbind_all('<MouseWheel>')
        widget.unbind_all('<Shift-MouseWheel>')
    else:
        widget.unbind_all('<Button-4>')
        widget.unbind_all('<Button-5>')
        widget.unbind_all('<Shift-Button-4>')
        widget.unbind_all('<Shift-Button-5>')

def _on_mousewheel(event, widget):
    if platform.system() == 'Windows':
        widget.yview_scroll(-1*int(event.delta/120),'units')
    elif platform.system() == 'Darwin':
        widget.yview_scroll(-1*int(event.delta),'units')
    else:
        if event.num == 4:
            widget.yview_scroll(-1, 'units')
        elif event.num == 5:
            widget.yview_scroll(1, 'units')

def _on_shiftmouse(event, widget):
    if platform.system() == 'Windows':
        widget.xview_scroll(-1*int(event.delta/120), 'units')
    elif platform.system() == 'Darwin':
        widget.xview_scroll(-1*int(event.delta), 'units')
    else:
        if event.num == 4:
            widget.xview_scroll(-1, 'units')
        elif event.num == 5:
            widget.xview_scroll(1, 'units')

if __name__ == '__main__':
    vp_start_gui()





